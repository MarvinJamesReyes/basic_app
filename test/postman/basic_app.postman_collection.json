{
	"info": {
		"_postman_id": "bf9b2524-00ee-4b61-b139-34823db33a44",
		"name": "basic_app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Save - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 201 OK', ()=> {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test('Message is \"Record saved\"', () => {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).is.not.null;\r",
							"    pm.expect(responseJson.message).to.be.a('string');\r",
							"    pm.expect(responseJson.message).to.eq('Record saved');\r",
							"});\r",
							"\r",
							"pm.test('Results include record id', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results).is.not.null;\r",
							"    pm.expect(responseJson.results).to.be.a('string');\r",
							"\r",
							"    // Store recordId\r",
							"    pm.collectionVariables.set('recordId', responseJson.results);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"record\": {\r\n        \"sender\": \"client@email.local\",\r\n        \"recipient\": \"service@corp.local\",\r\n        \"dateSent\": \"2021-09-02\",\r\n        \"content\": \"Hello, this is a message\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save - Invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 400 Bad Request', ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"\r",
							"pm.test('Error is \"Validation error\"', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).is.not.null;\r",
							"    pm.expect(responseJson.error).to.eq('Validation error');\r",
							"});\r",
							"\r",
							"pm.test('Error has validation error for record.recpient', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    const { results } = responseJson;\r",
							"    pm.expect(results).is.a('array');\r",
							"   \r",
							"    const [validation] = results;\r",
							"    pm.expect(validation).is.a('object');\r",
							"\r",
							"    pm.expect(validation.param).to.eq('record.recipient');\r",
							"    pm.expect(validation.value).to.eq('Not an email');\r",
							"    pm.expect(validation.msg).to.eq('Invalid value');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"record\": {\r\n        \"sender\": \"client@email.local\",\r\n        \"recipient\": \"Not an email\",\r\n        \"dateSent\": \"2021-09-02\",\r\n        \"content\": \"Hello, this is a message\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save - Invalid date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 400 Bad Request', ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"\r",
							"pm.test('Error is \"Validation error\"', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).is.not.null;\r",
							"    pm.expect(responseJson.error).to.eq('Validation error');\r",
							"});\r",
							"\r",
							"pm.test('Error has validation error for record.dateSent', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    const { results } = responseJson;\r",
							"    pm.expect(results).is.a('array');\r",
							"   \r",
							"    const [validation] = results;\r",
							"    pm.expect(validation).is.a('object');\r",
							"\r",
							"    pm.expect(validation.param).to.eq('record.dateSent');\r",
							"    pm.expect(validation.value).to.eq('October 4, 2010');\r",
							"    pm.expect(validation.msg).to.eq('Invalid value');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"record\": {\r\n        \"sender\": \"client@email.local\",\r\n        \"recipient\": \"service@corp.locall\",\r\n        \"dateSent\": \"October 4, 2010\",\r\n        \"content\": \"Hello, this is a message\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save - Missing field",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 400 Bad Request', ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"\r",
							"pm.test('Error is \"Validation error\"', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).is.not.null;\r",
							"    pm.expect(responseJson.error).to.eq('Validation error');\r",
							"});\r",
							"\r",
							"pm.test('Error has validation error for record.content', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    const { results } = responseJson;\r",
							"    pm.expect(results).is.a('array');\r",
							"   \r",
							"    const [validation] = results;\r",
							"    pm.expect(validation).is.a('object');\r",
							"\r",
							"    pm.expect(validation.param).to.eq('record.content');\r",
							"    pm.expect(validation.value).to.eq(undefined);\r",
							"    pm.expect(validation.msg).to.eq('Invalid value');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"record\": {\r\n        \"sender\": \"client@email.local\",\r\n        \"recipient\": \"service@corp.local\",\r\n        \"dateSent\": \"2021-09-02\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "List - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 200 OK', ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test('Message is \"List of records\"', () => {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).is.not.null;\r",
							"    pm.expect(responseJson.message).to.be.a('string');\r",
							"    pm.expect(responseJson.message).to.eq('List of records');\r",
							"});\r",
							"\r",
							"pm.test('Results is an array of records', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results).is.not.null;\r",
							"    pm.expect(responseJson.results).to.be.a('array');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "Load - Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 200 OK', ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test('Message is \"Record loaded\"', () => {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).is.not.null;\r",
							"    pm.expect(responseJson.message).to.be.a('string');\r",
							"    pm.expect(responseJson.message).to.eq('Record loaded');\r",
							"});\r",
							"\r",
							"pm.test('Results is a record object', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results).is.not.null;\r",
							"    pm.expect(responseJson.results).to.be.a('object');\r",
							"    pm.expect(responseJson.results.id).to.eq(pm.collectionVariables.get('recordId'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages/:id",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{recordId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 200 OK', ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test('Message is \"Record updated\"', () => {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).is.not.null;\r",
							"    pm.expect(responseJson.message).to.be.a('string');\r",
							"    pm.expect(responseJson.message).to.eq('Record updated');\r",
							"});\r",
							"\r",
							"pm.test('Results include record id', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results).is.not.null;\r",
							"    pm.expect(responseJson.results).to.be.a('string');\r",
							"    pm.expect(responseJson.results).to.eq(pm.collectionVariables.get('recordId'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"record\": {\r\n        \"content\": \"updatedetadpu\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages/:id",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{recordId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Save - Invalid email Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 400 Bad Request', ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"\r",
							"pm.test('Error is \"Validation error\"', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).is.not.null;\r",
							"    pm.expect(responseJson.error).to.eq('Validation error');\r",
							"});\r",
							"\r",
							"pm.test('Error has validation error for record.recpient', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    const { results } = responseJson;\r",
							"    pm.expect(results).is.a('array');\r",
							"   \r",
							"    const [validation] = results;\r",
							"    pm.expect(validation).is.a('object');\r",
							"\r",
							"    pm.expect(validation.param).to.eq('record.recipient');\r",
							"    pm.expect(validation.value).to.eq('Not an email');\r",
							"    pm.expect(validation.msg).to.eq('Invalid value');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"record\": {\r\n        \"recipient\": \"Not an email\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages/:id",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{recordId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Save - Invalid date Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 400 Bad Request', ()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.be.badRequest;\r",
							"});\r",
							"\r",
							"pm.test('Error is \"Validation error\"', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).is.not.null;\r",
							"    pm.expect(responseJson.error).to.eq('Validation error');\r",
							"});\r",
							"\r",
							"pm.test('Error has validation error for record.dateSent', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    const { results } = responseJson;\r",
							"    pm.expect(results).is.a('array');\r",
							"   \r",
							"    const [validation] = results;\r",
							"    pm.expect(validation).is.a('object');\r",
							"\r",
							"    pm.expect(validation.param).to.eq('record.dateSent');\r",
							"    pm.expect(validation.value).to.eq('October 4, 2010');\r",
							"    pm.expect(validation.msg).to.eq('Invalid value');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"record\": {\r\n        \"sender\": \"client@email.local\",\r\n        \"recipient\": \"service@corp.locall\",\r\n        \"dateSent\": \"October 4, 2010\",\r\n        \"content\": \"Hello, this is a message\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages/:id",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{recordId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 200 OK', ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.success;\r",
							"});\r",
							"\r",
							"pm.test('Message is \"Record deleted\"', () => {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).is.not.null;\r",
							"    pm.expect(responseJson.message).to.be.a('string');\r",
							"    pm.expect(responseJson.message).to.eq('Record deleted');\r",
							"});\r",
							"\r",
							"pm.test('Results include record id', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.results).is.not.null;\r",
							"    pm.expect(responseJson.results).to.be.a('string');\r",
							"    pm.expect(responseJson.results).to.eq(pm.collectionVariables.get('recordId'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages/:id",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{recordId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete - Missing record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 404 Not Found', ()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.notFound;\r",
							"});\r",
							"\r",
							"pm.test('Error is \"Record not found\"', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).is.not.null;\r",
							"    pm.expect(responseJson.error).to.eq('Record not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages/:id",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{recordId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Load - Missing record",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 404 Not Found', ()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.notFound;\r",
							"});\r",
							"\r",
							"pm.test('Error is \"Record not found\"', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).is.not.null;\r",
							"    pm.expect(responseJson.error).to.eq('Record not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages/:id",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{recordId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update - Missing record",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 404 Not Found', ()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.be.notFound;\r",
							"});\r",
							"\r",
							"pm.test('Error is \"Record not found\"', ()=> {\r",
							"    pm.response.to.be.json;\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.error).is.not.null;\r",
							"    pm.expect(responseJson.error).to.eq('Record not found');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"record\": {\r\n        \"content\": \"updatedetadpu\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/messages/:id",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"messages",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{recordId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "recordId",
			"value": ""
		}
	]
}